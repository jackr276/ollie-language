Revised Syntax
This syntax will enable recursive-descent parsing

Backtrack-free grammar: A CFG for which the leftmost, top-down parser can always predict the correct
rule with a lookahead of at most ONE token. To do this, we need to eliminate any/all left recursion.

This grammar is of the class RL1(Right recursive lookahead of at most 1 token)

<program> ::= {<declaration-partition}*


<declaration-partition> ::= <function-definition>
						  | <declaration>

<function-definition> ::= func (<function-specifier>)? <identifier> <parameter-list> -> <type-specifier> <compound-statement>

<function-specifier> ::= :static
		 			   | :external

<compound-statement> ::= {{<declaration>}* {<statement>}*}

<expression-statement> ::= {<expression>}?;

<statement> ::= <labeled-statement>
			  | <expression-statement>
			  | <compound-statement>
			  | <if-statement>
			  | <switch-statement>
			  | <iterative-statement>
			  | <jump-statement>

<jump-statement> ::= jump <identifier>
				     | continue when(<conditional-expression>);
					 | continue;
					 | break when(<conditional-expression>);
					 | break;
					 | ret {<expression>}?;

<switch-statement> ::= switch on( <expression> ) <labeled-statement>*

<labeled-statement> ::= <label-identifier> <compound-statement>
					  | case <constant-expression>  <compound-statement>
					  | default <compound-statement>

<iterative-statement> ::= while( <expression> ) do <compound-statement>
							| do <compound-statement> while( <expression> )
							| for( {<expression>}? ; {<expression>}? ; {<expression>}? ) do <compound-statement>

<if-statement> ::= if( <expression> ) then <statement> {else <statement>}*

<identifier> ::= (<letter> | <digit> | _ | $){(<letter>) | <digit> | _ | $}*

<constant> ::= <integer-constant>
			 | <string-constant>
			 | <float-constant>
			 | <boolean-constant>

<parameter-list> ::= (<parameter-declaration> <parameter-list-prime>)

<parameter-list-prime> ::= , <parameter-declaration><parameter-list-prime>
						 | epsilon

<parameter-declaration> ::= (<storage-class-specifier>)? (constant)? <type-specifier> <declarator>

<storage-class-specifier> ::= register
							| static
							| external

<user-defined-type> ::= <ident>

 <type-specifier> ::= void 
			 	    | u_int8 
			 		| s_int8 
			 		| u_int16 
			 		| s_int16 
			 		| u_int32 
			 		| s_int32 
			 		| u_int64 
			 		| s_int64
			 		| float32 
			 		| float64 
			 		| char 
			 		| str 
					| <enumeration-specifier> 
			 		| <structure-specifier> 
			 		| <user-defined-type>

<structure-specifier> ::= structure <identifier>{ <structure-declaration> {, <strucutre-declaration>}* }
						| structure { <structure-declaration>{, <structure-declaration>}* }
						| structure <identifier>

<structure-declaration> ::= {constant}? <type-specifier> <structure-declarator>

<structure-declarator> ::= <declarator>
						 | <declarator> := <constant-expression>


<enumator-specifier> ::= enumerated <identifier> { <enumerator-list> }
					   | enumerated <identifier>

<enumerator-list> ::= <enumerator><enumerator-list-prime>

<enumerator-list-prime> ::= ,<enumerator><enumerator-list-prime>

<enumerator> ::= <identifier>
			   | <identifier> := <constant-expression>

<constant-expression> ::= <conditional-expression> 

<conditional-expression> ::= <logical-or-expression>

<logical-or-expression> ::= <logical-and-expression><logical-or-expression-prime>

<logical-or-expression-prime ::= ||<logical-and-expression><logical-or-expression-prime>

<logical-and-expression> ::= <inclusive-or-expression><logical-and-expression-prime>

<logical-and-expression-prime> ::= &&<inclusive-or-expression><logical-and-expression-prime>

<inclusive-or-expression> ::= <exclusive-or-expression><inclusive-or-expression-prime>

<inclusive-or-expression-prime> ::= |<exclusive-or-expression><inclusive-or-expression-prime>

<exclusive-or-expression> ::= <and-expression> 
							| <and_expression><exclusive-or-expression-prime>

<exclusive-or-expression-prime> ::= ^<and_expression><exlcusive-or-expression-prime>

<and-expression> ::= <equality-expression> 
				   | <equality-expression><and-expression-prime>

<and-expression-prime> ::= <equality-expression><and-expression-prime>

<equality-expression> ::= <relational-expression> 
						| <relational-expression><equality-expression-prime>

<equality-expression-prime> ::= ==<relational-expression><equality-expression-prime>
							 |	!=<relational-expression><equality-expression-prime>

<relational-expression> ::= <shift-expression>
					 	  | <shift-expression> > <shift-expression>
					  	  | <shift-expression> < <shift-expression>
						  | <shift-expression> >= <shift-expression>
						  | <shift-expression> <= <shift-expression>

<shift-expression> ::= <additive-expression> 
				   	|  <additive-expression> << <additive-expression> 
					|  <additive-expression> >> <additive-expression>

<additive-expression> ::= <multiplicative-expression> 
					  	| <multiplicative-expression><additive-expression-prime>
	
<additive-expression-prime> ::= + <multiplicative-expression><additive-expression-prime>
							  | - <multiplicative-expression><additive-expression-prime>

<multiplicative-expression> ::= <cast-expression>
							  | <cast-expression><multiplicative-expression-prime>

<multiplicative-expression-prime> ::= *<cast-expression><multiplicative-expression-prime>
									| /<cast-expression><multiplicative-expression-prime>
									| %<cast-expression><multiplicative-expression-prime>

<cast-expression> ::= <unary-expression> 
					| < <type-name> > <unary-expression>

<unary-expression> ::= <postfix-expression>
					 | ++<unary-expression> 
					 | --<unary-expression> 
					 | <unary-operator> <cast-expression>
					 | size(<unary-expression>) 
					 | typesize(<type-name>)

<unary-operator> ::= & 
				  | * 
				  | ` 
				  | + 
				  | - 
				  | ~ 
				  | ! 

<postfix-expression> ::= <primary-expression>
					   | <primary-expression>:<postfix-expression>
					   | <primary-expression>::<postfix-expression>
					   | <primary-expression>{[ <expression> ]}*
					   | <primary-expression>{[ <expression> ]}*:<postifx-expression>
					   | <primary-expression>{[ <expression> ]}*::<postfix-expression>
					   | <primary-expression> ( {conditional_expression}* )
					   | <primary-expression> ++
					   | <primary-expression> --
					   
<primary-expression> ::= <identifier>
                       | <constant>
                       | ( <expression> )

<expression> ::= <assignment-expression>
			   | <assignment-expression><expression_prime>

<expression_prime> ::= , <assignment-expression><expression_prime>

<assignment-expression> ::= <conditional-expression>
						  | asn <unary-expression> := <conditional_expression>

<declaration-specifier> ::= <storage-class-specifier>
						  | <type-specifier>
						  | constant

<declaration> ::= declare {constant}? <storage-class-specifier>? <type-specifier> <declarator>;
	            | let {constant}? <storage-class-specifier>? <type-specifier> <declarator> := <intializer>;
				| define {constant} <storage-class-specifier>? <type-specifier> <declarator> as <ident>;

<declarator> ::= {<pointer>}? <direct-declarator>

<pointer> ::= * {<pointer>}?

<direct-declarator> ::= <identifier>
					  | ( <declarator> )
					  | <direct-declarator> [ {constant-expression}? ]
					  | <direct-declarator> ( <parameter-list> ) 
					  | <direct-declarator> ( {<identifier>}* )

<initializer> ::= <conditional-expression>
				| { <initializer-list> }

<initializer-list> ::= <initializer><initializer-list-prime>

<initializer-list-prime> ::= , <initializer><initializer-list-prime>

