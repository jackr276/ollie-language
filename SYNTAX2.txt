Revised Syntax
This syntax will enable recursive-descent parsing

Backtrack-free grammar: A CFG for which the leftmost, top-down parser can always predict the correct
rule with a lookahead of at most ONE token. To do this, we need to eliminate any/all left recursion.

This grammar is of the class RL1(Right recursive lookahead of at most 1 token)

<program> ::= {<declaration-partition}*

<declaration-partition> ::= <function-definition>
						  | <declaration>

<function-definition> ::= func (<function-specifier>)? <identifier> <parameter-list> -> <type-specifier> <compound-statement>

<function-specifier> ::= :static
		 			   | :external

<identifier> ::= (<letter> | <digit> | _ | $){(<letter>) | <digit> | _ | $}*

<parameter-list> ::= (<parameter-declaration> <parameter-list-prime>)

<parameter-list-prime> ::= , <parameter-declaration><parameter-list-prime>
						 | epsilon

<parameter-declaration> ::= (<storage-class-specifier>)? (constant)? <type-specifier> <direct-declarator>

<storage-class-specifier> ::= register
							| static
							| external

 <type-specifier> ::= void 
			 	    | u_int8 
			 		| s_int8 
			 		| u_int16 
			 		| s_int16 
			 		| u_int32 
			 		| s_int32 
			 		| u_int64 
			 		| s_int64
			 		| float32 
			 		| float64 
			 		| char 
			 		| str 
					| <enumeration-specifier> 
			 		| <structure-specifier> 
			 		| <user-defined-type>

<enumator-specifier> ::= enumerated <identifier> { <enumerator-list> }
					   | enumerated <identifier>

<enumerator-list> ::= <enumerator><enumerator-list-prime>

<enumerator-list-prime> ::= ,<enumerator><enumerator-list-prime>

<enumerator> ::= <identifier>
			   | <identifier> := <constant-expression>

<constant-expression> ::= <conditional-expression> 

<conditional-expression> ::= <logical-or-expression>

<logical-or-expression> ::= <logical-and-expression><logical-or-expression-prime>

<logical-or-expression-prime ::= ||<logical-and-expression><logical-or-expression-prime>

<logical-and-expression> ::= <inclusive-or-expression><logical-and-expression-prime>

<logical-and-expression-prime> ::= &&<inclusive-or-expression><logical-and-expression-prime>

<inclusive-or-expression> ::= <exclusive-or-expression><inclusive-or-expression-prime>

<inclusive-or-expression-prime> ::= |<exclusive-or-expression><inclusive-or-expression-prime>

<exclusive-or-expression> ::= <and-expression> 
							| <and_expression><exclusive-or-expression-prime>

<exclusive-or-expression-prime> ::= ^<and_expression><exlcusive-or-expression-prime>

<and-expression> ::= <equality-expression> 
				   | <equality-expression><and-expression-prime>

<and-expression-prime> ::= <equality-expression><and-expression-prime>

<equality-expression> ::= <relational-expression> 
						| <relational-expression><equality-expression-prime>

<equality-expression-prime> ::= ==<relational-expression><equality-expression-prime>
							 |	!=<relational-expression><equality-expression-prime>




