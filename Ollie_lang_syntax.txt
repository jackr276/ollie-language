The final form of the Ollie language syntax, as implemented by this compiler.

Rules are in no particular order. Nonterminals are enclosed inside of <>

Epsilon means that no production is required for the rule. Essentially, it is a blank rule

######################## Ollie language top level statements ##############################

<program> ::= {<declaration-partition>}+

<declaration-partition> ::= <function-defintion>
						  | <declaration>

<declaration> ::= <declare-statement>
				| <let-statement>
				| <define-statement>
				| <alias-statement>

################### Ollie language definition/declaration statements ########################

<function-definition> ::= func {:<function-specifier>}? <function-identifer> ({<parameter-list>}?) ->  <type-specifier> <compound-statement>

<function-specifier> ::= static
					   | external

<compound-statement> ::= { {<declaration>}* {<statement>}* }

<parameter-list> ::= <parameter_declaration>{, <parameter-declaration>}*
				   | epsilon

<parameter-declaration> ::= {constant}? <type-specifier> <identifier>

<declare-statement> ::= declare {constant}? {<storage-class-specifier>}? <type-specifier> <identifier>;

<let-statement> ::= let {constant}? {<storage-class-specifier>}? <type-specifier> <declarator> := <conditional-expression>;

<storage-class-specifier> ::= static
							| external
							| register

<define-statement> ::= <complex-type-definer>

<complex-type-definer> ::= <enumerated-definer>
						 | <construct-definer>

<enum-definer> ::= define enum <identifier> { <enum-member-list> } {as <identifier>}?;

<enum-member-list> ::= <enum-member>{, <enum-member>}*

<enum-member> ::= <identifier>

<construct-definer> ::= define construct <identifier> { <construct-member-list> } {as <identifer>}?;

<construct-member-list> ::= { <construct-member> ; }*

<construct-member> ::= {constant}? <type-specifier> <identifier>

<alias-statement> ::= alias <type-specifier> as <type-identifier>;

<declarator> ::= <identifer>
				 <identifer>{<array-accessor>}?
				 <identifier>{<construct-accessor}?

<array-accessor> ::= [ <conditional-expression> ]

<construct-accessor> ::= => <identifier>
					   | : <identifier>

<statement> ::= <labeled-statement>
			  | <expression-statement>
			  | <compound-statement>
			  | <if-statement>
			  | <switch-statement>
			  | <for-statement>
			  | <do-while-statement>
			  | <while-statement>
			  | <branch-statement>

<while-statement> ::= while( <conditional-expression> ) do <compound-statement>

<do-while-statement> ::= do <compound-statement> while( <conditional-expression> );

<for-statement> ::= for( {<assignment-expression> | <let-statement>}? ; {<conditional-expression>}? ; {<conditional-expression>}? ) do <compound-statement>
 
<switch-statement> ::= switch on( <conditional-expression> ) {<labeled-statement> <statement>}+

<branch-statement> ::= <jump-statement>
					 | <continue-statement>
					 | <break-statement>
					 | <return-statement>

<jump-statement> ::= jump <label-identifier>;

<continue-statement> ::=  continue {when(<conditional-expression>)}?; 

<break-statement> ::= break {when(<conditional-expression>)}?; 

<return-statement> ::= ret {<conditional-expression>}?;

<if-statement> ::= if( <conditional_expression> ) then <compound-statement> {else <if-statement | compound-statement>}*

<labeled-statement> ::= <label-identifier> :
					  | case <constant> :
 					  | default :

<expression-statement> ::= {<expression>}?;

########################## Ollie language expression rules ##################################

<conditional-expression> ::= <logical-or-expression>

<logical-or-expression> ::= <logical-and-expression>{||<logical_and_expression>}*

<logical-and-expression> ::= <inclusive-or-expression>{&&<inclusive-or-expression>}*

<inclusive-or-expression> ::= <exclusive-or-expression>{|<exclusive-or-expression}*

<exclusive-or-expression> ::= <and-expression>{^ <and-expression>}*

<and-expression> ::= <equality-expression>{& <equality-expression>}*

<equality-expression> ::= <relational-expression>{ (==|!=) <relational-expression> }*

<relational-expression> ::= <shift-expression>
					 	  | <shift-expression> > <shift-expression>
					  	  | <shift-expression> < <shift-expression>
						  | <shift-expression> >= <shift-expression>
						  | <shift-expression> <= <shift-expression>

<shift-expression> ::= <additive-expression> 
				   	|  <additive-expression> << <additive-expression> 
					|  <additive-expression> >> <additive-expression>

<additive-expression> ::= <multiplicative-expression>{ (+|-) <multiplicative-expression>}*

<multiplicative-expression> ::= <cast-expression>{ (* | / | %) <cast-expression>}

<cast-expression> ::= <unary-expression> 
					| < <type-specifier> > <unary-expression>

<unary-expression> ::= <postfix-expression>
					 | ++<unary-expression> 
					 | --<unary-expression> 
					 | <unary-operator> <cast-expression>
					 | typesize(<type-specifier>)

<unary-operator> ::= & 
				   | * 
				   | + 
				   | - 
				   | ~ 
				   | ! 

<postfix-expression> ::= <primary-expression>
					   | <primary-expression> {{<construct-accessor>}*{<array-accessor>*}}* {++|--}?

<primary-expression> ::= <variable-identifier>
                       | <constant>
                       | ( <expression> )
					   | <function-call>

<function-call> ::= @<function-identifier>({<conditional-expression>}?{, <conditional-expression>}*)

<expression> ::= <assignment-expression>

<assignment-expression> ::= <conditional-expression>
						  | asn <unary-expression> := <conditional_expression>


########################## Ollie language type system #######################################

<type-specifier> ::= <type-name>{<type-address-specifier>}*

{type-address-specifier} ::= [<constant>]
						    | &

<type-name> ::= void
			  | u_int8
			  | s_int8
			  | u_int16
			  | s_int16
			  | u_int32
			  | s_int32
			  | u_int64
			  | s_int64
			  | float32
			  | float64
			  | char
			  | <enumerated-type>
			  | <construct-type>
			  | <aliased-type>

<enumerated-type> ::= enum <type-identifier>

<construct-type> ::= construct <type-identifier>

<aliased-type> ::= <type-identifier>

<constant> ::= <integer-constant>
			 | <string-constant>
			 | <float-constant>
			 | <char-constant>

#############################################################################################
